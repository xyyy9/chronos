// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DailyLog {
  id                    String            @id @default(uuid())
  logicalDate           String
  mood                  Int
  sleepQuality          Int
  energyLevel           Int               @default(3)
  primaryActivities     PrimaryActivity[] @default([])
  mentalWorldActivities Json              @default("[]")
  dailyLifeActivities   Json              @default("[]")
  newsEntries           Json              @default("[]")
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  userId                String?
  user                  User?             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, logicalDate])
  @@index([userId])
}

enum PrimaryActivity {
  WORK
  STUDY
  FITNESS
  REST
  SOCIAL
  CREATIVE
}

model NewsCache {
  id        String   @id @default(uuid())
  language  String   @unique
  payload   Json
  fetchedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsSnapshot {
  id        String   @id @default(uuid())
  articleId String
  url       String
  title     String
  source    String
  language  String
  html      String
  savedAt   DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, url])
}

model User {
  id           String     @id @default(uuid())
  username     String
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  logs         DailyLog[]
  sessions     Session[]
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}
